<?xml version="1.0" encoding="UTF-8"?>
<beans 
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:tx="http://www.springframework.org/schema/tx" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
					    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd 
					    http://www.springframework.org/schema/tx 
					    http://www.springframework.org/schema/tx/spring-tx-3.0.xsd 
					    http://www.springframework.org/schema/jee 
					    http://www.springframework.org/schema/jee/spring-jee-3.0.xsd 
					    http://www.springframework.org/schema/aop 
					    http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
					    http://www.springframework.org/schema/context 
					    http://www.springframework.org/schema/context/spring-context-3.0.xsd"
	default-lazy-init="true">
	
	
	<!-- 设置主库数据源属性 -->  
    <bean id="dataSourceRead" class="com.atomikos.jdbc.AtomikosDataSourceBean" init-method="init" destroy-method="close">  
        <property name="uniqueResourceName" value="read_resource" />    
        <property name="xaDataSourceClassName" value="com.alibaba.druid.pool.xa.DruidXADataSource" />    
	    <property name="xaProperties">    
	        <props>    
	            <prop key="url">${master.jdbc.url}</prop>    
	            <prop key="username">${master.jdbc.username}</prop>    
	            <prop key="password">${master.jdbc.password}</prop>    
	        </props>    
	    </property>    
    </bean>  
  
    <bean id="jdbcTemplateRead" class="org.springframework.jdbc.core.JdbcTemplate">  
        <property name="dataSource" ref="dataSourceRead" />  
    </bean> 
    
    
    <!-- 设置丛库数据源属性 -->  
    <bean id="dataSourceWrite" class="com.atomikos.jdbc.AtomikosDataSourceBean" init-method="init" destroy-method="close">  
        <property name="uniqueResourceName" value="write_resource" />    
        <property name="xaDataSourceClassName" value="com.alibaba.druid.pool.xa.DruidXADataSource" />    
	    <property name="xaProperties">    
	        <props>    
	            <prop key="url">${slave01.jdbc.url}</prop>    
	            <prop key="username">${slave01.jdbc.username}</prop>    
	            <prop key="password">${slave01.jdbc.password}</prop>    
	        </props>    
	    </property>    
    </bean>  
  
    <bean id="jdbcTemplateWrite" class="org.springframework.jdbc.core.JdbcTemplate">  
        <property name="dataSource" ref="dataSourceWrite" />  
    </bean> 
	
	
	<!-- atomikos事务管理器 -->  
    <bean id="atomikosTransactionManager" class="com.atomikos.icatch.jta.UserTransactionManager" init-method="init" destroy-method="close">  
        <property name="forceShutdown">  
            <value>true</value>  
        </property>  
    </bean>  
  
    <bean id="atomikosUserTransaction" class="com.atomikos.icatch.jta.UserTransactionImp">  
        <property name="transactionTimeout" value="300" />  
    </bean>  
  
    <!-- spring 事务管理器 -->  
    <bean id="jtaTransactionManager" class="org.springframework.transaction.jta.JtaTransactionManager">  
        <property name="transactionManager" ref="atomikosTransactionManager"/>  
        <property name="userTransaction" ref="atomikosUserTransaction" />  
        <property name="allowCustomIsolationLevels" value="true"/>   
    </bean>  
  
  
    <!-- 配置事务传播特性 -->  
    <tx:advice id="transactionAdvice" transaction-manager="jtaTransactionManager">  
        <tx:attributes>  
            <tx:method name="save*" propagation="REQUIRED" rollback-for="Exception"/>  
            <tx:method name="update*" propagation="REQUIRED" rollback-for="Exception"/>  
            <tx:method name="move*" propagation="REQUIRED" rollback-for="Exception"/>  
            <tx:method name="*" propagation="SUPPORTS" read-only="true"/>  
        </tx:attributes>  
    </tx:advice>  
    
     <!-- 配置相关类的方法参与事务 -->  
    <aop:config>  
        <aop:advisor pointcut="execution(* service.*.*(..))" advice-ref="transactionAdvice" />  
    </aop:config>
  
    <!-- 使用注解方式定义事务 -->  
    <tx:annotation-driven transaction-manager="jtaTransactionManager" />  
  
    <!-- 使用AspectJ方式配置AOP -->  
    <aop:aspectj-autoproxy proxy-target-class="true" />
	
</beans>