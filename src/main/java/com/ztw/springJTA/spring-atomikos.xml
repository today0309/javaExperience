<?xml version="1.0" encoding="UTF-8"?>
<beans 
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" 
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
					    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd 
					    http://www.springframework.org/schema/context 
					    http://www.springframework.org/schema/context/spring-context-3.0.xsd
					    http://www.springframework.org/schema/aop 
					    http://www.springframework.org/schema/aop/spring-aop-3.1.xsd 
					    http://www.springframework.org/schema/tx 
					    http://www.springframework.org/schema/tx/spring-tx-3.1.xsd">

	<bean id="test1DataSource" class="com.atomikos.jdbc.AtomikosDataSourceBean" destroy-method="close">
		<property name="uniqueResourceName" value="test1" />
		<property name="xaDataSourceClassName" value="com.mysql.jdbc.jdbc2.optional.MysqlXADataSource" />
		<property name="xaProperties">
			<props>
				<prop key="url">${master.jdbc.url}</prop>    
	            <prop key="username">${master.jdbc.username}</prop>    
	            <prop key="password">${master.jdbc.password}</prop>
			</props>
		</property>
		<property name="minPoolSize" value="10" />
		<property name="maxPoolSize" value="100" />
		<property name="borrowConnectionTimeout" value="30" />
		<property name="testQuery" value="select 1" />
		<property name="maintenanceInterval" value="60" />
	</bean>

	<bean id="test2DataSource" class="com.atomikos.jdbc.AtomikosDataSourceBean" destroy-method="close">
		<property name="uniqueResourceName" value="test2" />
		<property name="xaDataSourceClassName" value="com.mysql.jdbc.jdbc2.optional.MysqlXADataSource" />
		<property name="xaProperties">
			<props>
				<prop key="url">${slave01.jdbc.url}</prop>    
	            <prop key="username">${slave01.jdbc.username}</prop>    
	            <prop key="password">${slave01.jdbc.password}</prop>
			</props>
		</property>
		<property name="minPoolSize" value="10" />
		<property name="maxPoolSize" value="100" />
		<property name="borrowConnectionTimeout" value="30" />
		<property name="testQuery" value="select 1" />
		<property name="maintenanceInterval" value="60" />
	</bean>

	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">    
		<property name="mapperLocations" value="classpath:/com/ztw/springJTA/dao/master/*.xml"></property>
        <property name="dataSource" ref="test1DataSource" />  
    </bean>  
    <bean id="sqlSessionFactoryOracle" class="org.mybatis.spring.SqlSessionFactoryBean">  
        <property name="mapperLocations" value="classpath:/com/ztw/springJTA/dao/slave01/*.xml"></property>  
        <property name="dataSource" ref="test2DataSource" />  
    </bean>  
      
    <!-- MyBatis为不同的mapper注入sqlSessionFactory -->  
    <bean id="mysqlTransactionTestDao" class="org.mybatis.spring.mapper.MapperFactoryBean">  
        <property name="sqlSessionFactory" ref="sqlSessionFactory" />  
        <property name="mapperInterface" value="com.ztw.springJTA.dao.master.*" />  
    </bean>  
    <bean id="transactionTestDao" class="org.mybatis.spring.mapper.MapperFactoryBean">  
        <property name="sqlSessionFactory" ref="sqlSessionFactoryOracle" />  
        <property name="mapperInterface" value="com.ztw.springJTA.dao.slave01.*" />  
    </bean>

	<!-- 分布式事务 -->
	<bean id="atomikosTransactionManager" class="com.atomikos.icatch.jta.UserTransactionManager" init-method="init" destroy-method="close">
		<property name="forceShutdown" value="true" />
	</bean>

	<bean id="atomikosUserTransaction" class="com.atomikos.icatch.jta.UserTransactionImp">
		<property name="transactionTimeout" value="300" />
	</bean>

	<bean id="transactionManager" class="org.springframework.transaction.jta.JtaTransactionManager">
		<property name="transactionManager" ref="atomikosTransactionManager" />
		<property name="userTransaction" ref="atomikosUserTransaction" />
	</bean>
	
	<tx:annotation-driven transaction-manager="transactionManager"/>

</beans>